{"version":3,"sources":["components/Display.js","components/Keypad.js","components/CalculatorApp.js","index.js"],"names":["Display","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","id","props","displayValue","Component","Keypad","className","onClick","onButtonPress","ADD","SUBTRACT","MULTIPLY","DIVIDE","DEFAULT_OPERATION","MAX_DISPLAY_CHARS","CalculatorApp","_this","call","setSavedValue","newValue","setState","savedValue","setDisplayText","displayText","roundDisplay","setOperation","operation","currentOperation","isNewOp","reset","e","classList","target","contains","numberPressed","innerText","operationPressed","equalsPressed","val","_val$split","split","_val$split2","slicedToArray","integer","fractional","console","log","decimalPlaces","Math","min","length","alert","num","state","includes","concat","performOperation","currentValue","parseFloat","error","toString","components_Display","components_Keypad","ReactDOM","render","components_CalculatorApp","document","getElementById"],"mappings":"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","file":"static/js/main.af865422.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Display extends Component {\n  render() {\n    return (\n      <div id='display-outer'>\n        <div id='display-inner'>\n          <div id='display'>{this.props.displayValue}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  displayValue: PropTypes.string.isRequired\n};\n\nexport default Display;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Keypad extends Component {\n  render() {\n    return (\n      <div id='keypad'>\n        <button\n          className='keypad-btn equals-btn'\n          id='equals'\n          onClick={this.props.onButtonPress}\n        >\n          =\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='zero'\n          onClick={this.props.onButtonPress}\n        >\n          0\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='one'\n          onClick={this.props.onButtonPress}\n        >\n          1\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='two'\n          onClick={this.props.onButtonPress}\n        >\n          2\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='three'\n          onClick={this.props.onButtonPress}\n        >\n          3\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='four'\n          onClick={this.props.onButtonPress}\n        >\n          4\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='five'\n          onClick={this.props.onButtonPress}\n        >\n          5\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='six'\n          onClick={this.props.onButtonPress}\n        >\n          6\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='seven'\n          onClick={this.props.onButtonPress}\n        >\n          7\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='eight'\n          onClick={this.props.onButtonPress}\n        >\n          8\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='nine'\n          onClick={this.props.onButtonPress}\n        >\n          9\n        </button>\n        <button\n          className='keypad-btn operation-btn'\n          id='add'\n          onClick={this.props.onButtonPress}\n        >\n          +\n        </button>\n        <button\n          className='keypad-btn operation-btn'\n          id='subtract'\n          onClick={this.props.onButtonPress}\n        >\n          -\n        </button>\n        <button\n          className='keypad-btn operation-btn'\n          id='multiply'\n          onClick={this.props.onButtonPress}\n        >\n          &times;\n        </button>\n        <button\n          className='keypad-btn operation-btn'\n          id='divide'\n          onClick={this.props.onButtonPress}\n        >\n          &divide;\n        </button>\n        <button\n          className='keypad-btn number-btn'\n          id='decimal'\n          onClick={this.props.onButtonPress}\n        >\n          .\n        </button>\n        <button\n          className='keypad-btn clear-btn'\n          id='clear'\n          onClick={this.props.onButtonPress}\n        >\n          AC\n        </button>\n      </div>\n    );\n  }\n}\n\nKeypad.propTypes = {\n  onButtonPress: PropTypes.func.isRequired\n};\n\nexport default Keypad;\n","import React, { Component } from 'react';\nimport Display from './Display';\nimport Keypad from './Keypad';\n\nconst ADD = 'add';\nconst SUBTRACT = 'subtract';\nconst MULTIPLY = 'multiply';\nconst DIVIDE = 'divide';\nconst DEFAULT_OPERATION = ADD;\n\nconst MAX_DISPLAY_CHARS = 14;\n\nexport class CalculatorApp extends Component {\n  constructor(props) {\n    super(props);\n\n    /* NOTE: savedValue is a number; displayText is string */\n    this.state = {\n      savedValue: 0,\n      displayText: '0',\n      currentOperation: DEFAULT_OPERATION,\n      isNewOp: true\n    };\n  }\n\n  setSavedValue = newValue => {\n    this.setState({ savedValue: newValue });\n  };\n\n  /**\n   * Update the display string in global state\n   */\n  setDisplayText = displayText => {\n    displayText = this.roundDisplay(displayText);\n    this.setState({ displayText });\n  };\n\n  /**\n   * Update the current operation in global state\n   */\n  setOperation = operation => {\n    this.setState({ currentOperation: operation, isNewOp: true });\n  };\n\n  /**\n   * Reset to default state\n   */\n  reset = () => {\n    this.setOperation(DEFAULT_OPERATION);\n    this.setDisplayText('0');\n    this.setSavedValue(0);\n  };\n\n  /**\n   * Delegate a button press event to the appropriate method depending\n   * on the type of the button which was pressed. The button types are:\n   *  number-btn, operation-btn, clear, and equals\n   */\n  onButtonPress = e => {\n    const classList = e.target.classList;\n    const id = e.target.id;\n\n    if (classList.contains('number-btn')) {\n      this.numberPressed(e.target.innerText);\n    } else if (classList.contains('operation-btn')) {\n      this.operationPressed(id);\n    } else if (id === 'clear') {\n      this.reset();\n    } else if (id === 'equals') {\n      this.equalsPressed();\n    }\n  };\n\n  /**\n   * Round display value in order to fit comfortably on display\n   */\n  roundDisplay = val => {\n    if (typeof val !== 'string') {\n      alert('FAIL');\n      return;\n    }\n\n    // if (!val.includes('.')) return val;\n\n    const [integer, fractional] = val.split('.');\n    console.log(integer, fractional);\n    const decimalPlaces = Math.min(\n      val.length - integer.length - 1,\n      MAX_DISPLAY_CHARS - integer.length - 1\n    );\n    console.log(decimalPlaces);\n\n    // return (\n    //   Math.round(parseFloat(val) * Math.pow(10, decimalPlaces)) /\n    //   Math.pow(10, decimalPlaces)\n    // ).toString();\n    return val;\n  };\n\n  /**\n   * Handle press event on 'number' buttons. This includes the\n   * decimal '.'\n   */\n  numberPressed = num => {\n    let displayText = this.state.displayText;\n\n    // We're entering a new operation\n    if (this.state.isNewOp) {\n      displayText = '';\n      this.setState({ isNewOp: false });\n    }\n\n    // Ignore decimal if display already has a decimal\n    if (num === '.' && displayText.includes('.')) return;\n\n    // If num is 0, ignore if display is already 0, otherwise clear display\n    if (displayText === '0') {\n      if (num === '0') return;\n      else displayText = '';\n    }\n\n    // if (num === '.') this.setDisplayText(`${num}${displayText}`);\n    this.setDisplayText(`${displayText}${num}`);\n  };\n\n  /**\n   * Handle press event for operation button\n   */\n  operationPressed = operation => {\n    this.performOperation(this.state.currentOperation);\n    this.setOperation(operation);\n  };\n\n  /**\n   * Handle press event for equals button\n   */\n  equalsPressed = () => {\n    this.performOperation(this.state.currentOperation);\n    this.setOperation(DEFAULT_OPERATION);\n  };\n\n  /**\n   * Perform the current operation\n   */\n  performOperation = operation => {\n    // If we haven't entered a number for a new operation yet, ignore\n    if (this.state.isNewOp) return;\n\n    let newValue = this.state.savedValue;\n    let currentValue = parseFloat(this.state.displayText);\n\n    switch (operation) {\n      case ADD:\n        newValue += currentValue;\n        break;\n      case SUBTRACT:\n        newValue -= currentValue;\n        break;\n      case MULTIPLY:\n        newValue *= currentValue;\n        break;\n      case DIVIDE:\n        if (currentValue === 0) console.error('DIVIDE BY ZERO');\n        newValue /= currentValue;\n        break;\n      default:\n        alert('UNKNOWN OPERATION');\n        break;\n    }\n\n    // newValue = this.roundDisplay(newValue);\n\n    this.setState({\n      savedValue: newValue,\n      displayText: newValue.toString()\n    });\n  };\n\n  render() {\n    return (\n      <div id='calculator-app'>\n        <Display displayValue={this.state.displayText} />\n        <Keypad onButtonPress={this.onButtonPress} />\n      </div>\n    );\n  }\n}\n\nexport default CalculatorApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport CalculatorApp from './components/CalculatorApp';\n\nimport './css/main.css';\n\nReactDOM.render(<CalculatorApp />, document.getElementById('root'));\n"],"sourceRoot":""}